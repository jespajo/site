<!DOCTYPE html>
<html>
  <head>
    <meta name="date" content="20181227">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" type="image/png" href="../files/icons/pencil.png" />
    <title>transition</title>
    <style>
      /* does not depend on size */
      * {
        overflow: hidden;
        box-sizing: border-box;
        margin: 0; padding: 0;
        font-family: monospace;
      }
      a {
        cursor: pointer;
        text-decoration: underline;
        color: #0000ee;
      }
      p#crumbs, div#main {
        position: absolute;
      }
      p#crumbs {
        font-size: 16px;
        top: 16px; left: 8px;
      }
      div#main {
        display: flex;
        top: 0; right: 0; bottom: 0; left: 0;
      }
      div.half {
        flex: 1;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      div.half p {
        font-size: 30px;
      }
      button#transition {
        height: 37px;
        background: none;
        border-width: 1px;
        border-style: solid none solid none;
        border-color: grey;
        font-size: 30px;
      }

      /* depends on size */
      div#main {
        flex-direction: column;
      }
      @media only screen and (min-width: 700px) {
        div#main {
          flex-direction: row;
        }
        button#transition {
          border-style: none solid none solid;
          height: auto;
          width: 37px;
        }
      }
    </style>
    <script>
      // define global variables
      let container, html;
      let canvas, ctx;
      let width, height;
      let img, data;

      const createCanvas = () => {
        // find width and height
        width = canvas.width = window.innerWidth;
        height = canvas.height = window.innerHeight;
        // create svg from DOM
        const parsed = new DOMParser().parseFromString(html, "text/xml");
        const rules = document.styleSheets[0].cssRules;
        (function applyRules(rules) {
          for (let r of rules) {
            if (r.media && window.matchMedia(r.media).matches) {
              applyRules(r.cssRules);
            }
            else {
              const elements = parsed.querySelectorAll(r.selectorText);
              for (let e of elements) {
                for (let i = 0; i < r.style.length; i++) {
                  e.style[r.style[i]] = r.style[r.style[i]];
                }
              }
            }
          }
        })(rules);
        const styled = parsed.getElementById('container').outerHTML;
        const svg = "data:image/svg+xml," +
          "<svg xmlns='http://www.w3.org/2000/svg' width='" + width + "' height='" + height + "'>" +
            "<foreignObject width='100%' height='100%'>" +
              styled +
            "</foreignObject>" +
          "</svg>";
        img = new Image();
        img.src = svg;
        img.onload = () => {
          ctx.drawImage(img, 0, 0, width, height);
          data = ctx.getImageData(0, 0, width, height);
          console.log("canvas ready to go!");
        };
      };

      const init = () => {
        // get DOM objects
        container = document.getElementById("container");
        html = container.outerHTML;
        // create canvas obj in background
        canvas = document.createElement("canvas");
        ctx = canvas.getContext("2d");
        createCanvas();
      };

      const toCanvas = () => {
        container.innerHTML = "";
        container.appendChild(canvas);
      };

      const toHTML = () => {
        location.reload();
      };

      // need a function that will define a path from (x0, y0)
      // to (x1, y1) that is within a set range in distance
      // and first moves away from other bits then moves towards (x1, y1)

      document.addEventListener("DOMContentLoaded", init);
      window.addEventListener("resize", toHTML);
    </script>
  </head>
  <body>
    <div id="container" xmlns="http://www.w3.org/1999/xhtml">
      <div id="main">
        <div class="half" id="one">
          <p>transition</p>
        </div>
        <button id="transition">&rarr;</button>
        <div class="half" id="two"></div>
      </div>
      <p id="crumbs">
        <a href="/d">d</a> / transition
      </p>
    </div>
  </body>
</html>